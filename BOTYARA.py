import asyncio
import sqlite3
import openpyxl
import logging
from aiogram import Bot, Dispatcher, types, F
from aiogram.enums import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext
from aiogram.types import FSInputFile


# =======================
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞
# =======================
API_TOKEN = "8386229219:AAHEWJVxjkitDXMqXDikEJS56BrKrty2cnE"   # —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Ç–æ–∫–µ–Ω –∏–∑ BotFather
ADMIN_ID = 474305924              # —Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π Telegram ID

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()

# =======================
# –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
# =======================
conn = sqlite3.connect("requests.db")
cursor = conn.cursor()
cursor.execute('''CREATE TABLE IF NOT EXISTS requests (
                    id INTEGER PRIMARY KEY AUTOINCREMENT,
                    name TEXT,
                    phone TEXT,
                    goal TEXT
                    user_id INTEGER,
                    status TEXT
                )''')
conn.commit()

# =======================
# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# =======================
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üßë‚Äçüíª –û–±–æ –º–Ω–µ")],
        [KeyboardButton(text="üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")],
        [KeyboardButton(text="üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")]
    ],
    resize_keyboard=True
)

# =======================
# –ö–æ–º–∞–Ω–¥—ã
# =======================
@dp.message(Command("start"))
async def start(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã –≠—Ç–æ –±–æ—Ç-–≤–∏–∑–∏—Ç–∫–∞.\n\n"
        "üìå –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:\n"
        "‚Äî –£–∑–Ω–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–±–æ –º–Ω–µ\n"
        "‚Äî –ü–æ–ª—É—á–∏—Ç—å –º–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã\n"
        "‚Äî –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É\n\n"
        "–í—ã–±–∏—Ä–∞–π –Ω—É–∂–Ω—ã–π —Ä–∞–∑–¥–µ–ª üëá",
        reply_markup=main_kb
    )

# =======================
# –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –∫–Ω–æ–ø–∫–∏
# =======================
@dp.message(F.text == "üßë‚Äçüíª –û–±–æ –º–Ω–µ")
async def about(message: types.Message):
    await message.answer("–î–∞–Ω–∏–ª–∞, 22 –≥–æ–¥–∞, –ø–∏—à—É –±–æ—Ç–æ–≤")

@dp.message(F.text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã")
async def contacts(message: types.Message):
    await message.answer("–°–≤—è–∑–∞—Ç—å—Å—è —Å–æ –º–Ω–æ–π –º–æ–∂–Ω–æ:\nTelegram: @dvsloff\nEmail: danila.vsloff@gmail.com")

# =======================
# FSM –¥–ª—è –∑–∞—è–≤–∫–∏
# =======================
class RequestForm(StatesGroup):
    name = State()
    phone = State()
    goal = State()
@dp.message(F.text == "üìù –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É")
async def start_request(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:")
    await state.set_state(RequestForm.name)

@dp.message(RequestForm.name)
async def get_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    await state.set_state(RequestForm.phone)

@dp.message(RequestForm.phone)
async def get_phone(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    await message.answer("–ö–∞–∫–∞—è —Ü–µ–ª—å –≤–∞—à–µ–π –∑–∞—è–≤–∫–∏? (–Ω–∞–ø—Ä–∏–º–µ—Ä: –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è, –∑–∞–∫–∞–∑ —É—Å–ª—É–≥–∏)")
    await state.set_state(RequestForm.goal)

@dp.message(RequestForm.goal)
async def get_goal(message: types.Message, state: FSMContext):
    data = await state.get_data()
    name = data["name"]
    phone = data["phone"]
    goal = message.text
    user_id = message.from_user.id

    cursor.execute("INSERT INTO requests (name, phone, goal, user_id, status) VALUES (?, ?, ?, ?, ?)",
                   (name, phone, goal, user_id, "–ù–æ–≤–∞—è"))
    conn.commit()

    # —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É
    await bot.send_message(
        ADMIN_ID,
        f"üì© –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞!\n\n–ò–º—è: {name}\n–¢–µ–ª–µ—Ñ–æ–Ω: {phone}\n–¶–µ–ª—å: {goal}\n–û—Ç: @{message.from_user.username or '–±–µ–∑ username'}",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å", callback_data=f"accept_{cursor.lastrowid}"),
                    InlineKeyboardButton(text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{cursor.lastrowid}")
                ]
            ]
        )
    )

    await message.answer("–°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ ‚úÖ")
    await state.clear()

# =======================
# –ê–¥–º–∏–Ω: –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞—è–≤–æ–∫
# =======================
@dp.callback_query(F.data.startswith("accept_"))
async def accept_request(callback: types.CallbackQuery):
    req_id = int(callback.data.split("_")[1])
    cursor.execute("UPDATE requests SET status='–ü—Ä–∏–Ω—è—Ç–∞' WHERE id=?", (req_id,))
    conn.commit()

    cursor.execute("SELECT user_id FROM requests WHERE id=?", (req_id,))
    user_id = cursor.fetchone()[0]

    await bot.send_message(user_id, "‚úÖ –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –ø—Ä–∏–Ω—è—Ç–∞!")
    await callback.message.edit_text("‚úÖ –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –ø—Ä–∏–Ω—è—Ç–∞")

@dp.callback_query(F.data.startswith("reject_"))
async def reject_request(callback: types.CallbackQuery):
    req_id = int(callback.data.split("_")[1])
    cursor.execute("UPDATE requests SET status='–û—Ç–∫–ª–æ–Ω–µ–Ω–∞' WHERE id=?", (req_id,))
    conn.commit()

    cursor.execute("SELECT user_id FROM requests WHERE id=?", (req_id,))
    user_id = cursor.fetchone()[0]

    await bot.send_message(user_id, "‚ùå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –±—ã–ª–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
    await callback.message.edit_text("‚ùå –ó–∞—è–≤–∫–∞ –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –æ—Ç–∫–ª–æ–Ω—ë–Ω–Ω–∞—è")

# –ö–û–ú–ê–ù–î–´ –ê–î–ú–ò–ù–ê
# ==================
@dp.message(Command("all_requests"))
async def all_requests(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    cursor.execute("SELECT * FROM requests")
    rows = cursor.fetchall()
    if not rows:
        await message.answer("üì≠ –ó–∞—è–≤–æ–∫ –ø–æ–∫–∞ –Ω–µ—Ç.")
    else:
        text = "üìã –°–ø–∏—Å–æ–∫ –∑–∞—è–≤–æ–∫:\n\n"
        for row in rows:
            text += f"#{row[0]} | {row[1]} | {row[2]} | –°—Ç–∞—Ç—É—Å: {row[3]}\n"
        await message.answer(text)


@dp.message(Command("clear_requests"))
async def clear_requests(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
    cursor.execute("DELETE FROM requests")
    conn.commit()
    await message.answer("üóë –í—Å–µ –∑–∞—è–≤–∫–∏ —É–¥–∞–ª–µ–Ω—ã.")


@dp.message(Command("export_requests"))
async def export_requests(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return await message.answer("‚õî –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

    cursor.execute("SELECT * FROM requests")
    rows = cursor.fetchall()

    if not rows:
        return await message.answer("üì≠ –ù–µ—Ç –∑–∞—è–≤–æ–∫ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")

    # –°–æ–∑–¥–∞—ë–º Excel —Ñ–∞–π–ª
    wb = openpyxl.Workbook()
    ws = wb.active
    ws.title = "–ó–∞—è–≤–∫–∏"

    # –ó–∞–≥–æ–ª–æ–≤–∫–∏
    ws.append(["–ù–æ–º–µ—Ä –∑–∞—è–≤–∫–∏", "–ò–º—è", "–¢–µ–ª–µ—Ñ–æ–Ω","UserID","–°—Ç–∞—Ç—É—Å","–¶–µ–ª—å"])

    # –î–∞–Ω–Ω—ã–µ
    for row in rows:
        ws.append(row)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º
    file_path = "requests_export.xlsx"
    wb.save(file_path)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª –∞–¥–º–∏–Ω—É
    file = FSInputFile(file_path)
    await message.answer_document(file, caption="üìÇ –≠–∫—Å–ø–æ—Ä—Ç –∑–∞—è–≤–æ–∫")


@dp.message(Command("help_admin"))
async def help_admin(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    await message.answer(
        "üëÆ‚Äç‚ôÇÔ∏è –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞:\n\n"
        "/all_requests ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏\n"
        "/clear_requests ‚Äî —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –∑–∞—è–≤–∫–∏\n"
        "/export_requests ‚Äî —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞—è–≤–∫–∏ –≤ Excel\n"
        "/help_admin ‚Äî —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥"
    )

# =======================
# –ó–∞–ø—É—Å–∫
# =======================
async def main():
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())